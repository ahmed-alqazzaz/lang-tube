import 'dart:developer';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:youtube_subtitles_scraper/src/data/source_subtitles.dart';
import 'package:youtube_subtitles_scraper/youtube_subtitles_scraper.dart'
    as subtitles_scraper;

import 'database_manager/data/cached_subtitle.dart';
import 'database_manager/data/constants.dart';
import 'database_manager/manager.dart';

@immutable
final class SubtitlesCacheManager implements subtitles_scraper.CacheManager {
  const SubtitlesCacheManager._(this._dbManager);
  final SubtitlesDbManager _dbManager;

  static Future<SubtitlesCacheManager> open() async {
    final cacheDirectory = await getTemporaryDirectory();

    return SubtitlesCacheManager._(
      await SubtitlesDbManager.open('${cacheDirectory.path}$subtitlesDbName'),
    );
  }

  @override
  Future<Iterable<CachedSubtitles>?> retrieveSubtitles(
          {required String videoId, required String language}) async =>
      await _dbManager
          .retrieveSubtitles(videoId: videoId, language: language)
          .then((subtitles) => subtitles.isNotEmpty ? subtitles : null);

  @override
  Future<void> cacheSubtitles({
    required String subtitles,
    required String videoId,
    required String language,
    required bool isSubtitlesAutoGenerated,
  }) async {
    await _dbManager.addVideoIdIfNotPresent(videoId);
    final subtitlesInfoId = await _dbManager.insertSubtitlesInfoIfNotPresent(
      videoId: videoId,
      language: language,
      isAutoGenerated: isSubtitlesAutoGenerated,
    );
    await _dbManager.insertSubtitles(
      subtitles: subtitles,
      subtitlesInfoId: subtitlesInfoId,
    );
  }

  @override
  Future<void> clearSubtitlesCache() => _dbManager.deleteAllSubtitles();

  Future<void> close() async => await _dbManager.close();

  @override
  Future<void> cacheSubtitlesSourceCaptions(
      {required String videoId, required List<SourceCaptions> sourceCaptions}) {
    // TODO: implement cacheSubtitlesSourceCaptions
    throw UnimplementedError();
  }

  @override
  Future<List<SourceCaptions>?> retrieveSubtitlesSourceUrls(
      {required String videoId}) {
    // TODO: implement retrieveSubtitlesSourceUrls
    throw UnimplementedError();
  }
}
