import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:lang_tube/subtitles_player/providers/multi_subtitles_player_provider/provider.dart';
import 'package:lang_tube/subtitles_scraper/scraper.dart';
import 'package:lang_tube/youtube_video_player/providers/subtitles_provider.dart';
import 'package:lang_tube/youtube_video_player/yotube_video_player_modes/full_screen_youtube_player.dart';
import 'package:lang_tube/youtube_video_player/yotube_video_player_modes/portrait_youtube_player.dart';
import 'package:languages/languages.dart';
import 'package:subtitles_player/subtitles_player.dart';
import 'package:value_notifier_transformer/value_notifier_transformer.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';
import 'settings/subtitles_settings/selectability_builder.dart';

class YoutubeVideoPlayerView extends ConsumerStatefulWidget {
  const YoutubeVideoPlayerView({
    super.key,
    required this.videoId,
  });
  final String videoId;
  @override
  ConsumerState<ConsumerStatefulWidget> createState() =>
      _YoutubeVideoPlayerViewState();
}

class _YoutubeVideoPlayerViewState
    extends ConsumerState<YoutubeVideoPlayerView> {
  late final YoutubePlayerController _youtubePlayerController;

  @override
  void initState() {
    _youtubePlayerController = YoutubePlayerController(
      initialVideoId: widget.videoId,
      flags: const YoutubePlayerFlags(enableCaption: false),
    );

    SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
    SystemChrome.setPreferredOrientations([]);

    super.initState();
  }

  @override
  void dispose() {
    _youtubePlayerController.dispose();
    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);
    super.dispose();
  }

  MultiSubtitlesPlayerProvider buildMultiSubtitlesPlayerProvider({
    required List<Subtitle>? mainSubtitles,
    required List<Subtitle>? translatedSubtitles,
  }) {
    return multiSubtitlesPlayerProvider((
      mainSubtitles: mainSubtitles ?? [],
      translatedSubtitles: translatedSubtitles ?? [],
      playbackPosition:
          _youtubePlayerController.where((event) => !event.isDragging).syncMap(
                (value) => value.position,
              )
    ));
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Theme(
      data: theme.copyWith(
        scaffoldBackgroundColor: Colors.grey.shade900,
        iconTheme: theme.iconTheme.copyWith(size: 30),
      ),
      child: Scaffold(
        body: YoutubePlayerBuilder(
          player: YoutubePlayer(
            controller: _youtubePlayerController,
            bottomActions: const [],
            topActions: const [],
          ),
          builder: (context, player) {
            return Consumer(
              builder: (context, ref, _) {
                final subtitlesBundles =
                    ref.watch(subtitlesProvider).valueOrNull?.toList();
                final options = subtitlesBundles?.map((subtitlesBundle) => (
                      language: Language.english,
                      isAutoGenerated:
                          subtitlesBundle.mainSubtitlesData.isAutoGenerated
                    ));
                return SubtitlesSelectabilityBuilder(
                  options: options?.toList() ?? [],
                  builder: (subtitlesSettings, selectedIndex, showTransaltion) {
                    final selectedSubtitles = subtitlesBundles?[selectedIndex];
                    final multiSubtitlesPlayerProvider =
                        buildMultiSubtitlesPlayerProvider(
                      mainSubtitles: selectedSubtitles
                          ?.mainSubtitlesData.subtitles
                          .toList(),
                      translatedSubtitles: showTransaltion
                          ? selectedSubtitles?.translatedSubtitlesData.subtitles
                              .toList()
                          : null,
                    );
                    return OrientationBuilder(
                      builder: (context, orientation) {
                        if (orientation == Orientation.portrait) {
                          return PortraitYoutubePlayer(
                            player: player,
                            subtitlesSettings: subtitlesSettings,
                            multiSubtitlesPlayerProvider:
                                multiSubtitlesPlayerProvider,
                            youtubePlayerController: _youtubePlayerController,
                          );
                        }
                        return FullScreenYoutubeVideoPlayer(
                          player: player,
                          multiSubtitlesPlayerProvider:
                              multiSubtitlesPlayerProvider,
                          youtubePlayerController: _youtubePlayerController,
                        );
                      },
                    );
                  },
                );
              },
            );
          },
        ),
      ),
    );
  }
}
