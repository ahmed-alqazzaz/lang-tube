import 'dart:developer';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:lang_tube/youtube_video_player/utils/subtitles_player/utils/api_client/dio_api_client.dart';
import 'package:lang_tube/youtube_video_player/utils/subtitles_player/utils/subtitles_parser/subtitles_parser.dart';
import 'package:lang_tube/youtube_video_player/utils/subtitles_player/utils/subtitles_scraper/subtitles_cache_manager.dart';

import 'package:youtube_explode_dart/youtube_explode_dart.dart';

import 'data/exceptions.dart';

@immutable
class SubtitlesScraper {
  const SubtitlesScraper._(
      {required DioApiClient client,
      required SubtitlesCacheManager cacheManager})
      : _client = client,
        _cacheManager = cacheManager;

  static Future<SubtitlesScraper> withRandomUserAgent() async =>
      SubtitlesScraper._(
        client: await DioApiClient.withRandomUserAgent(),
        cacheManager: await SubtitlesCacheManager.open(),
      );
  static Future<SubtitlesScraper> withUserAgent(String userAgent) async =>
      SubtitlesScraper._(
        client: await DioApiClient.withUserAgent(userAgent),
        cacheManager: await SubtitlesCacheManager.open(),
      );

  final DioApiClient _client;
  final SubtitlesCacheManager _cacheManager;

  Stream<SubtitlesParser> getSubtitle({
    required String youtubeVideoId,
    required String language,
    required bool allowAutoGenerated,
  }) async* {
    final manifest = await YoutubeExplode().videos.closedCaptions.getManifest(
          youtubeVideoId,
        );
    for (final track in manifest.tracks) {
      if (track.isAutoGenerated && !allowAutoGenerated) {
        continue;
      }
      if (track.format == ClosedCaptionFormat.srv1) {
        // yield subtitles from cache if exists,
        // otherwise, fetch it, cache it and yield it
        yield SubtitlesParser(
          await _cacheManager.retrieveSubtitlesIfExists(youtubeVideoId) ??
              await _fetchUri<String>(track.url).then(
                (subtitlesString) async {
                  log('failedddd');
                  await _cacheManager.cacheSubtitles(
                    subtitlesString: subtitlesString,
                    fileName: youtubeVideoId,
                  );
                  return subtitlesString;
                },
              ),
        );
      }
    }
  }

  Future<T> _fetchUri<T>(Uri uri) async {
    try {
      return await _client.fetchUri(uri).then((response) {
        if (response.statusCode != 200) {
          throw SubtitlesScraperBlockedRequestException();
        }
        return response.data!;
      });
    } on DioError catch (e) {
      if (e.error == DioErrorType.sendTimeout ||
          e.type == DioErrorType.connectionTimeout ||
          e.type == DioErrorType.receiveTimeout) {
        throw SubtitlesScraperNetworkException();
      } else if (e.error == DioErrorType.badResponse) {
        throw SubtitlesScraperBlockedRequestException();
      } else {
        throw SubtitlesScraperUnknownException();
      }
    }
  }
}
