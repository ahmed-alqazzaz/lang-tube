import 'dart:developer';
import 'dart:io';
import 'dart:math' as math;

import 'package:dio/dio.dart';
import 'package:lang_tube/youtube_video_player/utils/subtitles_player/utils/subtitles_parser/subtitles_parser.dart';
import 'package:lang_tube/youtube_video_player/utils/subtitles_player/utils/subtitles_scraper/data/popular_user_agents.dart';

import 'package:youtube_explode_dart/youtube_explode_dart.dart';

import 'data/exceptions.dart';

class SubtitlesScraper {
  SubtitlesScraper({required String userAgent})
      : _dio = Dio()..options.headers['User-Agent'] = userAgent;
  factory SubtitlesScraper.withRandomUserAgent() =>
      SubtitlesScraper(userAgent: _randomUserAgent);

  final Dio _dio;
  Future<T> _fetchUri<T>(Uri uri) async {
    try {
      return await _dio.getUri<T>(uri).then((response) {
        if (response.statusCode != 200) {
          throw SubtitlesScraperBlockedRequestException();
        }
        return response.data!;
      });
    } on DioError catch (e) {
      if (e.error == DioErrorType.sendTimeout ||
          e.type == DioErrorType.connectionTimeout ||
          e.type == DioErrorType.receiveTimeout) {
        throw SubtitlesScraperNetworkException();
      } else if (e.error == DioErrorType.badResponse) {
        throw SubtitlesScraperBlockedRequestException();
      } else {
        throw SubtitlesScraperUnknownException();
      }
    }
  }

  Stream<SubtitlesParser> getSubtitle({
    required String youtubeVideoId,
    required String language,
    required bool allowAutoGenerated,
  }) async* {
    final manifest = await YoutubeExplode().videos.closedCaptions.getManifest(
          youtubeVideoId,
        );
    for (final track in manifest.tracks) {
      if (track.isAutoGenerated && !allowAutoGenerated) {
        continue;
      }
      if (track.format == ClosedCaptionFormat.srv1) {
        final subtitlesString = await _fetchUri<String>(track.url);
        yield SubtitlesParser(subtitlesString);
      }
    }
  }

  // Get a random user agent from the list of popular user agents
  static String get _randomUserAgent => popularUserAgents.elementAt(
        math.Random().nextInt(popularUserAgents.length),
      );
}
