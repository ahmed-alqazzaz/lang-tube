import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_switch/flutter_switch.dart';
import 'package:languages/languages.dart';

import 'selectability_builder.dart';

class SubtitlesSettings extends StatelessWidget {
  const SubtitlesSettings({
    super.key,
    required this.options,
  });
  final List<({Language language, bool isAutoGenerated})> options;

  Widget _translationSwitcher() {
    return Consumer(
      builder: (context, ref, _) {
        bool isTranslationDisplayed = ref.watch(translationVisibilityProvider);
        return FlutterSwitch(
          value: isTranslationDisplayed,
          onToggle: (value) =>
              ref.read(translationVisibilityProvider.notifier).state = value,
          activeText: "",
          inactiveText: "",
          width: 60,
          height: 30,
          activeColor: Colors.deepPurple,
          activeIcon: const Icon(
            Icons.translate,
            color: Colors.black,
          ),
          inactiveIcon: const Icon(
            Icons.translate,
            color: Colors.black,
          ),
        );
      },
    );
  }

  Widget _optionBuilder({required int index}) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Consumer(
          builder: (context, ref, _) {
            return RawMaterialButton(
              onPressed: () => ref
                  .read(subtitlesSelectabilityProvider.notifier)
                  .state = index,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(_optionBorderRadius),
              ),
              child: ListTile(
                leading: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(_flagBorderRadius),
                    child: AspectRatio(
                      aspectRatio: _flagAspectRatio,
                      child: Language.german().flag,
                    ),
                  ),
                ),
                visualDensity: const VisualDensity(vertical: -1),
                shape: RoundedRectangleBorder(
                  side: const BorderSide(
                    color: Colors.transparent,
                  ),
                  borderRadius: BorderRadius.circular(_optionBorderRadius),
                ),
                trailing: Consumer(builder: (context, ref, _) {
                  return Checkbox(
                    value: ref.watch(
                      subtitlesSelectabilityProvider
                          .select((selectedIndex) => index == selectedIndex),
                    ),
                    onChanged: (_) => ref
                        .read(subtitlesSelectabilityProvider.notifier)
                        .state = index,
                    activeColor: Colors.deepPurple.shade700,
                    side: BorderSide(color: Colors.grey.shade200, width: 2),
                    shape: RoundedRectangleBorder(
                      borderRadius:
                          BorderRadius.circular(_checkBoxBorderRadius),
                    ),
                  );
                }),
                tileColor: const Color.fromARGB(255, 50, 50, 50),
                title: Center(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        options[index].language.name.capitalize(),
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      Transform.translate(
                        offset: const Offset(5, 0),
                        child: Text(
                          options[index].isAutoGenerated
                              ? "(auto generated)"
                              : "(original)",
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.w300,
                            fontSize: 13,
                          ),
                        ),
                      )
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: ThemeData(
        scaffoldBackgroundColor: const Color.fromARGB(255, 20, 20, 20),
        appBarTheme: const AppBarTheme(color: Colors.transparent, elevation: 0),
      ),
      child: LayoutBuilder(
        builder: (context, constraints) {
          return Scaffold(
            appBar: AppBar(
              title: const Text("Select subtitles"),
              toolbarHeight: 70,
              automaticallyImplyLeading: false,
              actions: [
                Padding(
                    padding: const EdgeInsets.only(right: 15),
                    child: _translationSwitcher())
              ],
            ),
            body: LayoutBuilder(
              builder: (context, constraints) {
                return ListView.separated(
                  shrinkWrap: true,
                  padding: EdgeInsets.only(
                    top: constraints.maxHeight * 0.1,
                    bottom: constraints.maxHeight * 0.15,
                    left: constraints.maxWidth * 0.05,
                    right: constraints.maxWidth * 0.05,
                  ),
                  itemBuilder: (context, index) => _optionBuilder(index: index),
                  separatorBuilder: (context, index) =>
                      SizedBox(height: constraints.maxHeight * 0.07),
                  itemCount: options.length,
                );
              },
            ),
          );
        },
      ),
    );
  }

  static const double _flagAspectRatio = 9 / 7;
  static const double _flagBorderRadius = 10;
  static const double _checkBoxBorderRadius = 3;
  static const double _optionBorderRadius = 20;
}

extension StringExtension on String {
  String capitalize() {
    return "${this[0].toUpperCase()}${substring(1).toLowerCase()}";
  }
}
