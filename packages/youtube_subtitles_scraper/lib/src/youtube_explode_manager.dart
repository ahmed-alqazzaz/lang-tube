// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:async';
import 'dart:developer';

import 'package:flutter/foundation.dart';
import 'package:languages/languages.dart';
import 'package:unique_key_mutex/unique_key_mutex.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:youtube_subtitles_scraper/youtube_subtitles_scraper.dart';

@immutable
final class YoutubeExplodeManager {
  YoutubeExplodeManager({required CacheManager cacheManager})
      : _youtubeExplode = YoutubeExplode(),
        _cacheManager = cacheManager;
  final YoutubeExplode _youtubeExplode;
  final CacheManager _cacheManager;

  Future<Iterable<SourceCaptions>> fetchSourceCaptions(
          {required String youtubeVideoId, required Language language}) async =>
      await fetchAllCaptions(youtubeVideoId: youtubeVideoId).then(
        (captions) => captions.where((caption) => caption.language == language),
      );

  Future<Iterable<SourceCaptions>> fetchAllCaptions(
      {required String youtubeVideoId}) async {
    try {
      await UniqueKeyMutex(key: youtubeVideoId).acquire();
      final cache =
          await _cacheManager.retrieveSources(videoId: youtubeVideoId);
      if (cache != null) return cache;
      final timer = Stopwatch()..start();
      log("123 scrape started $youtubeVideoId");
      final captions = await _scrapeAllCaptions(youtubeVideoId: youtubeVideoId);
      log("123 finnished within ${timer.elapsedMilliseconds}");
      await _cacheManager.cacheSources(
        videoId: youtubeVideoId,
        sourceCaptions: captions.toList(),
      );
      return captions;
    } finally {
      UniqueKeyMutex(key: youtubeVideoId).release();
    }
  }

  Future<Iterable<SourceCaptions>> _scrapeAllCaptions(
          {required String youtubeVideoId}) =>
      _youtubeExplode.videos.closedCaptions.getManifest(youtubeVideoId,
          formats: [ClosedCaptionFormat.srv1]).then(
        (manifest) => manifest.tracks.map(
          (track) => SourceCaptions(
            uri: track.url,
            videoId: youtubeVideoId,
            isAutoGenerated: track.isAutoGenerated,
          ),
        ),
      );

  Future<void> deleteCacheById({required String videoId}) async {
    _cacheManager.clearSourcesById(videoId: videoId);
  }

  void close() => _youtubeExplode.close();
}
