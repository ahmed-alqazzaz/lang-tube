import 'package:flutter/foundation.dart';
import 'package:languages/languages.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:youtube_subtitles_scraper/src/abstract/cache_manager.dart';
import 'package:youtube_subtitles_scraper/src/data/source_subtitles.dart';

@immutable
final class YoutubeExplodeManager {
  YoutubeExplodeManager({required CacheManager cacheManager})
      : _youtubeExplode = YoutubeExplode(),
        _cacheManager = cacheManager;
  final YoutubeExplode _youtubeExplode;
  final CacheManager _cacheManager;

  Future<Iterable<SourceCaptions>> fetchSourceCaptions(
          {required String youtubeVideoId, required Language language}) =>
      _fetchAllCaptions(youtubeVideoId: youtubeVideoId).then(
        (captions) => captions.where((caption) => caption.language == language),
      );

  Future<Iterable<SourceCaptions>> _fetchAllCaptions(
      {required String youtubeVideoId}) async {
    // final cache = await _cacheManager.retrieveSubtitlesSourceUrls(
    //     videoId: youtubeVideoId);
    // if (cache != null) return cache;
    final captions = await _scrapeAllCaptions(youtubeVideoId: youtubeVideoId);
    // _cacheManager.cacheSubtitlesSourceCaptions(
    //   videoId: youtubeVideoId,
    //   sourceCaptions: captions.toList(),
    // );
    return captions;
  }

  Future<Iterable<SourceCaptions>> _scrapeAllCaptions(
          {required String youtubeVideoId}) =>
      _youtubeExplode.videos.closedCaptions.getManifest(youtubeVideoId,
          formats: [ClosedCaptionFormat.srv1]).then(
        (manifest) => manifest.tracks.map(
          (track) => SourceCaptions(
            uri: track.url,
            videoId: youtubeVideoId,
            isAutoGenerated: track.isAutoGenerated,
          ),
        ),
      );

  Future<void> deleteCacheById({required String videoId}) async {}
  void close() => _youtubeExplode.close();
}
