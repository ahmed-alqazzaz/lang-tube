import 'dart:developer';

import 'package:flutter/foundation.dart';
import 'package:languages/languages.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:youtube_subtitles_scraper/src/api_client.dart';
import 'package:youtube_subtitles_scraper/src/cache_manager.dart';
import 'package:youtube_subtitles_scraper/src/scraped_subtitles.dart';

@immutable
final class YoutubeSubtitlesScraper {
  YoutubeSubtitlesScraper({
    required CacheManager cacheManager,
    required SubtitlesScraperApiClient apiClient,
  })  : _cacheManager = cacheManager,
        _apiClient = apiClient,
        _youtubeExplode = YoutubeExplode();
  final CacheManager _cacheManager;
  final SubtitlesScraperApiClient _apiClient;
  final YoutubeExplode _youtubeExplode;

  // in case translated language is provided,
  // the function will return a translated version
  // the main language subtitle
  Future<List<ScrapedSubtitles>?> scrapeSubtitles({
    required String youtubeVideoId,
    required Language language,
    Language? translatedLanguage,
  }) async {
    return await _scrapeCaptionTrack(
      youtubeVideoId: youtubeVideoId,
      language: language,
    )
        .then(
          (captions) => Future.wait(
            captions.map(
              (caption) async => await _scrapeAndCacheSubtitles(
                youtubeVideoId: youtubeVideoId,
                caption: translatedLanguage == null
                    ? caption
                    : caption.autoTranslate(translatedLanguage.code),
                language: translatedLanguage ?? language,
              ),
            ),
          ),
        )
        .then((subtitles) => subtitles.isEmpty ? null : subtitles);
  }

  Future<Iterable<ClosedCaptionTrackInfo>> _scrapeCaptionTrack({
    required String youtubeVideoId,
    required Language language,
  }) async =>
      await _youtubeExplode.videos.closedCaptions.getManifest(youtubeVideoId,
          formats: [ClosedCaptionFormat.srv1]).then(
        (manifest) => manifest.tracks.where(
          (caption) =>
              caption.language.name.toLowerCase().contains(language.name),
        ),
      );
  Future<ScrapedSubtitles> _scrapeAndCacheSubtitles({
    required String youtubeVideoId,
    required ClosedCaptionTrackInfo caption,
    required Language language,
  }) async {
    final subtitles = await _apiClient.fetchUrl<String>(caption.url);
    await _cacheManager.cacheSubtitles(
      subtitles: subtitles,
      language: language.name,
      isSubtitlesAutoGenerated: caption.isAutoGenerated,
      videoId: youtubeVideoId,
    );
    return ScrapedSubtitles(
      subtitles: subtitles,
      isAutoGenerated: caption.isAutoGenerated,
    );
  }

  void dispose() => _youtubeExplode.close();
}
