import 'dart:developer';

import 'package:flutter/foundation.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:youtube_subtitles_scraper/src/api_client.dart';
import 'package:youtube_subtitles_scraper/src/cache_manager.dart';
import 'package:youtube_subtitles_scraper/src/scraped_subtitles.dart';

@immutable
final class YoutubeSubtitlesScraper {
  YoutubeSubtitlesScraper({
    required CacheManager cacheManager,
    required SubtitlesScraperApiClient apiClient,
  })  : _cacheManager = cacheManager,
        _apiClient = apiClient,
        _yt = YoutubeExplode();
  final CacheManager _cacheManager;
  final SubtitlesScraperApiClient _apiClient;
  final YoutubeExplode _yt;

  Stream<ScrapedSubtitles> scrapeSubtitles({
    required String youtubeVideoId,
    required String language,
  }) async* {
    Future<ScrapedSubtitles> scrape(
        ClosedCaptionTrackInfo caption, String language) async {
      final subtitles = await _apiClient.fetchUrl<String>(caption.url);

      await _cacheManager.cacheSubtitles(
        subtitles: subtitles,
        language: language,
        isSubtitlesAutoGenerated: caption.isAutoGenerated,
        videoId: youtubeVideoId,
      );
      return ScrapedSubtitles(
        subtitles: subtitles,
        isAutoGenerated: caption.isAutoGenerated,
        translateTo: (String language) async =>
            await scrape(caption.autoTranslate('ar'), 'arabic'),
      );
    }

    // retrieve cache
    final manifest = await _yt.videos.closedCaptions
        .getManifest(youtubeVideoId, formats: [ClosedCaptionFormat.srv1]);
    final captions = manifest.tracks.where(
      (caption) => caption.language.name.toLowerCase().contains(
            language.toLowerCase(),
          ),
    );
    for (final caption in captions) {
      yield await scrape(caption, language);
    }
  }

  void dispose() => _yt.close();
}
