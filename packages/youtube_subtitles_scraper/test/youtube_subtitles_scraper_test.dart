import 'dart:developer';

import 'package:collection/collection.dart';
import 'package:dio/dio.dart';
import 'package:languages/languages.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:youtube_subtitles_scraper/src/models/source_captions.dart';
import 'package:youtube_subtitles_scraper/youtube_subtitles_scraper.dart';
import 'package:flutter_test/flutter_test.dart';
import 'test_subtitles/kurtzgesagt/video2.dart' as kurzgesagt_video2;

Future<void> main() async {
  final x = [
    ScrapedSubtitles(
      subtitles: '',
      isAutoGenerated: true,
      videoId: '2',
      language: Language.arabic.name,
    ),
    ScrapedSubtitles(
      subtitles: '',
      isAutoGenerated: true,
      videoId: '1',
      language: Language.arabic.name,
    ),
    ScrapedSubtitles(
      subtitles: '',
      isAutoGenerated: true,
      videoId: '1',
      language: Language.arabic.name,
    ),
  ];

  print(x.groupListsBy((element) => element.videoId));
  final scraper = YoutubeSubtitlesScraper(
    cacheManager: MockCacheManager(),
    apiClient: MockApiClient(),
  );
  return;
//   print(x.first.autoTranslate(Language.arabic.name).url.toString());
//   final timer = Stopwatch()..start();
//   await YoutubeExplode().videos.closedCaptions.getSubTitles(x.first);
  // group('scraping kurzesagt: ${kurzgesagt_video2.topic}', () {
  //   List<ScrapedSubtitles>? englishSubtitles;
  //   List<ScrapedSubtitles>? arabicSubtitles;
  //   setUp(() async {
  //     englishSubtitles = await scraper.scrapeSubtitles(
  //       youtubeVideoId: 'uoJwt9l-XhQ',
  //       language: Language.english,
  //     );
  //     arabicSubtitles = await scraper.scrapeSubtitles(
  //       youtubeVideoId: 'uoJwt9l-XhQ',
  //       language: Language.english,
  //       translatedLanguage: Language.arabic,
  //     );
  //   });
  //   test('scrapes english subtitles successfully', () async {
  //     expect(englishSubtitles, kurzgesagt_video2.englishSubtitles);
  //   });
  //   // test('scrapes auto generated arabic subtitles successfully ', () async {
  //   //   expect(arabicSubtitles?.first.subtitles,
  //   //       kurzgesagt_video2.arabicSubtitle.subtitles);
  //   // });
  // });
}

class MockCacheManager extends CacheManager {
  @override
  Future<void> cacheSubtitles({
    required String subtitles,
    required String videoId,
    required String language,
    required bool isSubtitlesAutoGenerated,
  }) async {}

  @override
  Future<void> cacheSources(
      {required String videoId,
      required List<SourceCaptions> sourceCaptions}) async {
    return;
  }

  @override
  Future<void> clearSources({String? videoId, bool? isAutoGenerated}) async {
    return;
  }

  @override
  Future<void> clearSubtitlesCache() async {
    return;
  }

  @override
  Future<Iterable<SourceCaptions>?> retrieveSources(
      {String? videoId, String? language}) async {
    return null;
  }

  @override
  Future<Iterable<ScrapedSubtitles>?> retrieveSubtitles(
      {String? videoId, String? language}) async {
    return null;
  }
}

class MockApiClient extends SubtitlesScraperApiClient {
  @override
  Future<T> fetchUrl<T>(Uri url,
          {void Function(int p1, int p2)? onReceiveProgress}) async =>
      (await Dio().getUri<T>(url)).data!;
}
