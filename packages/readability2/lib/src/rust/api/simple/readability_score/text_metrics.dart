// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Self>>
@sealed
class Self extends RustOpaque {
  Self.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Self.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Self,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Self,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SelfPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<str>>
@sealed
class Str extends RustOpaque {
  Str.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Str.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Str,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Str,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StrPtr,
  );
}

class TextMetrics {
  final int wordsCount;
  final int sentencesCount;
  final int longWordsCount;
  final double longWordsPercentage;
  final int charsCount;
  final double avgSylCount;
  final double sentenceAvgWordcount;
  final int polysyllableCount;

  const TextMetrics({
    required this.wordsCount,
    required this.sentencesCount,
    required this.longWordsCount,
    required this.longWordsPercentage,
    required this.charsCount,
    required this.avgSylCount,
    required this.sentenceAvgWordcount,
    required this.polysyllableCount,
  });

  static Future<Self> newTextMetrics({required Str text, dynamic hint}) =>
      RustLib.instance.api.textMetricsNew(text: text, hint: hint);

  @override
  int get hashCode =>
      wordsCount.hashCode ^
      sentencesCount.hashCode ^
      longWordsCount.hashCode ^
      longWordsPercentage.hashCode ^
      charsCount.hashCode ^
      avgSylCount.hashCode ^
      sentenceAvgWordcount.hashCode ^
      polysyllableCount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TextMetrics &&
          runtimeType == other.runtimeType &&
          wordsCount == other.wordsCount &&
          sentencesCount == other.sentencesCount &&
          longWordsCount == other.longWordsCount &&
          longWordsPercentage == other.longWordsPercentage &&
          charsCount == other.charsCount &&
          avgSylCount == other.avgSylCount &&
          sentenceAvgWordcount == other.sentenceAvgWordcount &&
          polysyllableCount == other.polysyllableCount;
}
